jobs:
  performance-test:
    needs: start-test-runner
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: inputs.comment-id
      name: Link comment to workflow run
      uses: peter-evans/create-or-update-comment@v1
      with:
        body: '#### Note: The following `dataset=` values are supported: `1m`<sub>(default)</sub>,
          `10m`, `20m`,

          `bottleneck_stream1`, `bottleneck_stream_randomseed. For destinations only:
          you can also use `stream-numbers=N`

          to simulate N number of parallel streams. Additionally, `sync-mode=incremental`
          is supported for destinations.

          For example: `dataset=1m stream-numbers=2 sync-mode=incremental`

          > :runner: ${{inputs.connector}} https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}.

          '
        comment-id: ${{ inputs.comment-id }}
    - continue-on-error: true
      id: regex
      name: Search for valid connector name format
      uses: AsasInnab/regex-action@v1
      with:
        regex_flags: i
        regex_pattern: ^(connectors/)?[a-zA-Z0-9-_]+$
        search_string: ${{ inputs.connector }}
    - continue-on-error: true
      if: steps.regex.outputs.first_match != inputs.connector
      name: Validate input workflow format
      run: echo "The connector provided has an invalid format!" && exit 1
    - continue-on-error: true
      if: ${{ inputs.connector != 'connectors/source-postgres' && inputs.connector
        != 'connectors/source-mysql' && inputs.connector != 'connectors/destination-snowflake'
        && inputs.connector != 'connectors/source-mongodb-v2' }}
      name: Filter supported connectors
      run: echo "Only connectors/source-postgres, source-mysql, source-mongodb-v2
        and destination-snowflake currently supported by harness" && exit 1
    - continue-on-error: true
      name: Checkout Airbyte
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.gitref }}
        repository: ${{ inputs.repo }}
    - continue-on-error: true
      name: Install Java
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: '21'
    - continue-on-error: true
      name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - continue-on-error: true
      name: Install CI scripts
      run: 'pip install pipx

        pipx ensurepath

        pipx install airbyte-ci/connectors/ci_credentials

        pipx install airbyte-ci/connectors/connector_ops

        '
    - continue-on-error: true
      id: which-harness
      name: Source or Destination harness
      run: 'the_harness="$(echo ${{inputs.connector}} | sed ''s/.*\///; s/-.*//'')"-harness

        echo "harness_type=$the_harness" >> "$GITHUB_OUTPUT"

        '
    - continue-on-error: true
      env:
        GCP_GSM_CREDENTIALS: ${{ secrets.GCP_GSM_CREDENTIALS }}
        HARNESS_TYPE: ${{ steps.which-harness.outputs.harness_type }}
      name: Write harness credentials
      run: 'export PATH="$PATH:/root/.local/bin"

        ci_credentials connectors-performance/$HARNESS_TYPE write-to-storage

        connector_name=$(echo ${{ inputs.connector }} | sed ''s,.*/,,'')

        ci_credentials connectors-performance/$connector_name write-to-storage

        '
    - continue-on-error: true
      env:
        HARNESS_TYPE: ${{ steps.which-harness.outputs.harness_type }}
      name: build harness
      run: 'echo "Building... ${{ steps.which-harness.outputs.harness_type }}" >>
        $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY

        ./gradlew :airbyte-integrations:connectors-performance:$HARNESS_TYPE:build
        -x check

        '
      shell: bash
    - continue-on-error: true
      env:
        GCP_GSM_CREDENTIALS: ${{ secrets.GCP_GSM_CREDENTIALS }}
      name: build connector
      run: 'echo "Building... ${{inputs.connector}}" >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line

        connector_name=$(echo ${{ inputs.connector }} | sed ''s,.*/,,'')

        echo "Running ./gradlew :airbyte-integrations:connectors:$connector_name:build
        -x check"

        ./gradlew :airbyte-integrations:connectors:$connector_name:build -x check

        '
      shell: bash
    - continue-on-error: true
      name: KIND Kubernetes Cluster Setup
      uses: helm/kind-action@v1.4.0
      with:
        config: ./tools/bin/${{ steps.which-harness.outputs.harness_type }}-kind-cluster-config.yaml
    - continue-on-error: true
      env:
        CONN: ${{ inputs.connector }}
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DS: ${{ inputs.dataset }}
        HARNESS_TYPE: ${{ steps.which-harness.outputs.harness_type }}
        PREFIX: '{"type":"LOG","log":{"level":"INFO","message":"INFO i.a.i.p.PerformanceTest(runTest):165'
        REPORT_TO_DATADOG: ${{ inputs.report-to-datadog }}
        STREAM_NUMBER: ${{ inputs.stream-number }}
        SUFFIX: '"}}'
        SYNC_MODE: ${{ inputs.sync-mode }}
      id: run-harness
      name: Run harness
      run: 'kubectl apply -f ./tools/bin/admin-service-account.yaml

        connector_name=$(echo $CONN | cut -d / -f 2)

        kind load docker-image airbyte/$connector_name:dev --name chart-testing

        kind load docker-image airbyte/$HARNESS_TYPE:dev --name chart-testing

        # envsubst requires variables to be exported or setup in the env field in
        this step.

        export CONNECTOR_IMAGE_NAME=${CONN/connectors/airbyte}:dev

        export DATASET=$DS

        export HARNESS=$HARNESS_TYPE

        envsubst < ./tools/bin/run-harness-process.yaml | kubectl create -f -

        echo "harness is ${{ steps.which-harness.outputs.harness_type }}"

        POD=$(kubectl get pod -l app=performance-harness -o jsonpath="{.items[0].metadata.name}")

        kubectl wait --for=condition=Ready --timeout=20s "pod/$POD"

        kubectl logs --follow $POD

        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

        echo "RUN_RESULT<<$EOF" >> $GITHUB_OUTPUT

        kubectl logs --tail=1 $POD | while read line ; do line=${line#"$PREFIX"};
        line=${line%"$SUFFIX"}; echo $line >> $GITHUB_OUTPUT ; done

        echo "$EOF" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      if: inputs.comment-id
      name: Link comment to workflow run
      uses: peter-evans/create-or-update-comment@v2
      with:
        body: '## Performance test Result:

          ```

          ${{ steps.run-harness.outputs.RUN_RESULT }}

          ```

          '
        comment-id: ${{ inputs.comment-id }}
        reactions: '+1'
    timeout-minutes: 240
  start-test-runner:
    name: Start Build EC2 Runner
    needs: uuid
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      label: ${{ steps.start-ec2-runner.outputs.label }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Airbyte
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.gitref }}
        repository: ${{ inputs.repo }}
    - continue-on-error: true
      name: Check PAT rate limits
      run: "./tools/bin/find_non_rate_limited_PAT \\\n  ${{ secrets.GH_PAT_BUILD_RUNNER_OSS\
        \ }} \\\n  ${{ secrets.GH_PAT_BUILD_RUNNER_BACKUP }}\n"
    - continue-on-error: true
      id: start-ec2-runner
      name: Start AWS Runner
      uses: ./.github/actions/start-aws-runner
      with:
        aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
        github-token: ${{ env.PAT }}
    timeout-minutes: 10
  stop-test-runner:
    if: ${{ always() }}
    name: Stop Build EC2 Runner
    needs:
    - start-test-runner
    - performance-test
    - uuid
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
    - continue-on-error: true
      name: Checkout Airbyte
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Check PAT rate limits
      run: "./tools/bin/find_non_rate_limited_PAT \\\n  ${{ secrets.GH_PAT_BUILD_RUNNER_OSS\
        \ }} \\\n  ${{ secrets.GH_PAT_BUILD_RUNNER_BACKUP }}\n"
    - continue-on-error: true
      name: Stop EC2 runner
      uses: supertopher/ec2-github-runner@base64v1.0.10
      with:
        ec2-instance-id: ${{ needs.start-test-runner.outputs.ec2-instance-id }}
        github-token: ${{ env.PAT }}
        label: ${{ needs.start-test-runner.outputs.label }}
        mode: stop
    timeout-minutes: 10
  uuid:
    name: Custom UUID of workflow run
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: UUID ${{ inputs.uuid }}
      run: true
    timeout-minutes: 10
name: Connector Performance Harness
on:
  repository_dispatch:
    types: trigger-ga___connector-performance-command.yml
